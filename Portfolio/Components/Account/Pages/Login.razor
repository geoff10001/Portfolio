@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Portfolio.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="wrapper">
    <section>
        <StatusMessage Message="@errorMessage" />
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating">
                <span class="input-icon"><i class="oi oi-envelope-closed"></i></span>
                <InputText @bind-Value="Input.Email" class="form-control input-margin-bottom input-margin-bottom" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email" class="form-label">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating">
                <span class="input-icon"><i class="oi oi-lock-locked"></i></span>
                <InputText type="password" @bind-Value="Input.Password" class="form-control input-margin-bottom" autocomplete="current-password" aria-required="true" placeholder="password" />
                <label for="password" class="form-label">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="row col-12 remove-margin-padding">
                <div class="checkbox col-6 remove-margin-padding">
                    <label class="form-label label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" />
                        Remember me
                    </label>
                </div>
                <div class="col-6 text-end remove-margin-padding">
                    <a class="form-label label my-menu-btn" id="forgot-password" href="@(NavigationManager.GetUriWithQueryParameters("./Account/ForgotPassword", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Forgot password?</a>
                </div>
            </div>
            <div>
                <button type="submit" class="w-100 btn btn-lg btn-primary input-margin-bottom">Log in</button>
            </div>
            <div class="row input-margin-bottom text-center">
                <div>
                    <a class="form-label label input-margin-bottom my-menu-btn" href="@(NavigationManager.GetUriWithQueryParameters("./Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                </div>

                <div>
                    <a class="form-label label my-menu-btn " href="./Account/ResendEmailConfirmation">Resend email confirmation</a>
                </div>

            </div>

        </EditForm>
    </section>
    @* <section>
        <h3>Use another service to log in.</h3>
        <hr />
        <ExternalLoginPicker />
    </section> *@
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
